{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Books","state","results","query","handleQuery","event","_this","setState","target","value","search","preventDefault","axios","get","concat","then","response","console","log","data","items","saveBook","book","post","title","volumeInfo","link","previewLink","_this2","this","react_default","a","createElement","onSubmit","type","onChange","map","result","Fragment","key","id","onClick","React","Component","SavedBooks","books","_this4","App","react_router_dom","to","react_router","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0SAMMA,6MAEJC,MAAM,CACJC,QAAQ,GACRC,MAAM,MAIRC,YAAY,SAACC,GACXC,EAAKC,SAAS,CAACJ,MAAME,EAAMG,OAAOC,WAGpCC,OAAO,SAACL,GACNA,EAAMM,iBACNC,IAAMC,IAAN,iDAAAC,OAA2DR,EAAKL,MAAME,QAASY,KAC7E,SAAAC,GACEC,QAAQC,IAAIF,EAASG,KAAKC,OAC1Bd,EAAKC,SAAS,CAACL,QAAQc,EAASG,KAAKC,aAO3CC,SAAS,SAAAC,GACPV,IAAMW,KAAK,aAAa,CACtBC,MAAMF,EAAKG,WAAWD,MACtBE,KAAKJ,EAAKG,WAAWE,uFAIjB,IAAAC,EAAAC,KACN,OACAC,EAAAC,EAAAC,cAAA,mBACIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUJ,KAAKnB,QACnBoB,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOzB,MAAOoB,KAAK5B,MAAME,MAAOgC,SAAUN,KAAKzB,cAC3D0B,EAAAC,EAAAC,cAAA,UAAQE,KAAK,UAAb,WAGFJ,EAAAC,EAAAC,cAAA,WACCH,KAAK5B,MAAMC,QAAQkC,IAAI,SAAAC,GACtB,OACEP,EAAAC,EAAAC,cAAAF,EAAAC,EAAAO,SAAA,KACAR,EAAAC,EAAAC,cAAA,OAAKO,IAAKF,EAAOG,IACjBV,EAAAC,EAAAC,cAAA,UAAKK,EAAOZ,WAAWD,QAEzBM,EAAAC,EAAAC,cAAA,UAAQS,QAAS,kBAAIb,EAAKP,SAASgB,KAAnC,mBA9CUK,IAAMC,WAyDpBC,6MACJ3C,MAAQ,CACN4C,MAAO,uFAGW,IAAAC,EAAAjB,KAClBjB,IAAMC,IAAI,UAAUE,KAAK,SAAAC,GACvB8B,EAAKvC,SAAS,CAAEsC,MAAO7B,EAASG,0CAKlC,OAAOW,EAAAC,EAAAC,cAAA,wBAELF,EAAAC,EAAAC,cAAA,WACCH,KAAK5B,MAAM4C,MAAMT,IAAI,SAAAd,GACpB,OAAOQ,EAAAC,EAAAC,cAAA,WAAMV,EAAKE,MAAMM,EAAAC,EAAAC,cAAA,sBAhBPU,IAAMC,WAgDhBI,MAtBf,WACE,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAG,KAAT,UAEFnB,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAMC,GAAG,gBAAT,kBAKRnB,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWrD,IAChC8B,EAAAC,EAAAC,cAACkB,EAAA,EAAD,CAAOC,KAAK,eAAeE,UAAWT,MC5FvBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnD,KAAK,SAAAoD,GACjCA,EAAaC","file":"static/js/main.40ecbc5b.chunk.js","sourcesContent":["import React from 'react';\nimport {BrowserRouter as Router,Route,Link} from 'react-router-dom';\nimport './App.css';\nimport axios from 'axios';\n\n\nclass Books extends React.Component{\n\n  state={\n    results:[],\n    query:\"\"\n  };\n\n\n  handleQuery=(event)=>{\n    this.setState({query:event.target.value})\n  }\n\n  search=(event)=>{\n    event.preventDefault();\n    axios.get(`https://www.googleapis.com/books/v1/volumes?q=${this.state.query}`).then(\n      response=>{\n        console.log(response.data.items);\n        this.setState({results:response.data.items})\n\n\n      }\n    )\n  }\n\n  saveBook=book=>{\n    axios.post(\"/api/books\",{\n      title:book.volumeInfo.title,\n      link:book.volumeInfo.previewLink\n    });\n  }\n\n  render(){\n    return(\n    <div>Books\n        <form onSubmit={this.search}>\n          <input type=\"text\" value={this.state.query} onChange={this.handleQuery}/>\n          <button type=\"submit\">Search</button>\n          \n        </form>\n        <hr/>\n        {this.state.results.map(result=>{\n          return(\n            <>\n            <div key={result.id}> \n            <h2>{result.volumeInfo.title}</h2>\n            </div>\n          <button onClick={()=>this.saveBook(result)}>Save</button>\n          </>\n          );\n        })}\n    </div>\n    \n      \n      )\n  }\n\n}\nclass SavedBooks extends React.Component{\n  state = {\n    books: []\n  }\n\n  componentDidMount() {\n    axios.get(\"/books\").then(response => {\n      this.setState({ books: response.data })\n    })\n  }\n\n  render(){\n    return(<div>\n      SavedBooks\n      <hr />\n      {this.state.books.map(book => {\n        return <div>{book.title}<hr /></div>\n\n      })}\n    </div>)\n  }\n\n}\n\n\n\nfunction App() {\n  return (\n    <Router>\n      <nav>\n        <ul>\n          <li>\n            <Link to=\"/\">Books</Link>\n          </li>\n          <li>\n            <Link to=\"/saved-books\">Saved Books</Link>\n          </li>\n        </ul>\n\n      </nav>\n    <Route path=\"/\" exact component={Books}/>\n     <Route path=\"/saved-books\" component={SavedBooks}  />\n\n\n   </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}